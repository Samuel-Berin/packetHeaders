#!/usr/bin/python -u
#
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1400
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0
SEQUENCE = 0

inbox = []

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))


def send_snack(seqNum):
    msg = json.dumps({"ack": False, "syn": False, "snack": seqNum})
    log("ABOUT TO SEND " + msg)
    if sock.sendto(msg, addr) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[recv sent packet]")

def send_ack(seqNum):
    msg = json.dumps({"ack": seqNum, "syn": False, "snack": False})
    log("ABOUT TO SEND " + msg)
    if sock.sendto(msg, addr) < len(msg):
      log("[error] unable to fully send packet")
    else:
      log("[recv sent packet]")


# Now listen for packets!
while True:
  result = sock.recvfrom(MSG_SIZE)

  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      decoded = json.loads(data)

      sequenceToSend = False
      if(decoded['syn'] is True):
          log("[syn recieved]")
          msg = json.dumps({"syn": True, "ack": "Not A Real Ack"})
          sock.sendto(msg, addr)

      # If the EOF flag is set, exit
      if (decoded['eof']):
        log("[completed]")
        sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded['data']):
        # If we receive data, we assume it's in-order
        # You will need to do much more here
        # If the packet is the next packet we expect
        if decoded['sequence'] == SEQUENCE:
            log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
            SEQUENCE += len(decoded['data'])
            sys.stdout.write(decoded['data'])
            send_ack(decoded['sequence'])

            # Check to see if we have any packets
            if len(inbox) > 0:
                for msg in inbox:
                    if SEQUENCE == msg['sequence']:
                        log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
                        sys.stdout.write(decoded['data'])
                        send_ack(msg['sequence'])
                        SEQUENCE += len(msg['data'])
                        inbox.remove(msg)


        # We got a later one, send SNACK and store it
        if decoded['sequence'] > SEQUENCE:
            inbox.append(decoded)
            inbox.sort(key=lambda x: x['sequence'])
            send_snack(decoded['sequence'])


    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
