#!/usr/bin/python -u
#
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

MSG_SIZE = 1400
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0
SEQUENCE = 0


# The packets received, unordered.
inbox = []

# Seen sequence numbers
seen = []

# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.bind((UDP_IP, UDP_PORT))
sock.settimeout(TIMEOUT)

# Get port we bound to
UDP_PORT = sock.getsockname()[1]
log("[bound] " + str(UDP_PORT))

def send_ack(packet, snack): #ADDED: snack as a parameter, T/F
  global SEQUENCE
  log("[recv data] " + str(packet["sequence"]) + " (" + str(len(packet['data'])) + ") ACCEPTED (in-order)")
  sys.stdout.write(decoded["data"])
  if snack:         #ADDED
    msg = json.dumps({"ack": False, "syn": False, "snack": packet["sequence"]})
  else:
    SEQUENCE += len(decoded["data"])
    msg = json.dumps({"ack": packet["sequence"], "syn": False, "snack": False})
  log("ABOUT TO SEND " + msg)
  if sock.sendto(msg, addr) < len(msg):
    log("[error] unable to fully send packet")
  else:
    log("[recv sent packet]")

# Now listen for packets!
while True:
  result = sock.recvfrom(MSG_SIZE)
  # If nothing is ready, we hit the timeout
  if result:
    (data, addr) = result

    try:
      decoded = json.loads(data)

      if (decoded["syn"] is True):
          log("[syn recieved]")
          msg = json.dumps({"syn": True, "ack": "Not A Real Ack", "snack": False})
          sock.sendto(msg, addr)

      #ADDED
      if decoded["sequence"] in seen:
        continue

      # If the EOF flag is set, exit
      if (decoded["eof"]):
        log("[completed]")
        sys.exit(0)

      # If there is data, we accept it and print it out
      if (decoded["data"]):
        log("SEQUENCE:" + SEQUENCE)
        log("DECODED SEQUENCE:" + decoded["sequence"])
        # If the packet is the next packet we expect
        if decoded["sequence"] == SEQUENCE:
            send_ack(decoded, False)

            if (len(inbox) > 0):
              for msg in inbox:
                if msg["sequence"] == SEQUENCE:
                  send_ack(msg, False)


        #The recieved packet is from later than what we expected,
        #Save it for later
        #Send a snack
        elif decoded["sequence"] > SEQUENCE:
          inbox.append(decoded)
          sorted(inbox, key=lambda x: x["sequence"])

      #ADDED
      seen.append(decoded["sequence"])



    except (ValueError, KeyError, TypeError) as e:
      log("[recv corrupt packet]")
      raise e
  else:
    log("[error] timeout")
