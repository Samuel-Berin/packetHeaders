#!/usr/bin/python -u
#
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

MSG_SIZE = 1500
DATA_SIZE = 1000
TIMEOUT = 30
SEQUENCE = 0

# Bind to localhost and an ephemeral port
IP_PORT = sys.argv[1]
UDP_IP = IP_PORT[0:IP_PORT.find(":")]
UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
dest = (UDP_IP, UDP_PORT)

#Outbox for unacked messages
outbox = []


# Set up the socket
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(TIMEOUT)

def log(string):
  sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")


# Sends the given message to the given destination
def send_msg_to_dest(msg, dest):
    msgJson = json.loads(msg)
    seqNum = msgJson['sequence']
    datalen = len(msgJson['data'])
    if sock.sendto(msg, dest) < len(msg):
        log("[error] unable to fully send packet")
    else:
        log("[send data] " + str(seqNum) + " (" + str(datalen) + ")")

def send_next_packet():
  global SEQUENCE

  data = sys.stdin.read(DATA_SIZE)
  if (len(data) > 0):
    msg = json.dumps({"sequence": SEQUENCE, "data": data, "ack": False, "eof": False})
    SEQUENCE += len(data)

    outbox.append(msg)
    send_msg_to_dest(msg, dest)

    return True
  else:
    return False

# Send first packet
send_next_packet()

# Now read in data, send packets
while True:
  log("ABOUT TO SLEEP")
  result = sock.recvfrom(MSG_SIZE)

  if result:
    (data, addr) = result
    try:
      decoded = json.loads(data)

      # The sequence number for the oldest message in the outbox
      outboxStartingSeqNum = json.loads(outbox[0])['sequence']
      if decoded['ack'] == outboxStartingSeqNum:
        log("[recv ack] " + str(SEQUENCE))
        outbox.pop(0)

        # Try to send next packet; break if no more data
        if (not send_next_packet()):
          break

      # If there is an ack with a different sequence number
      else:
          log("[recv ack] " + str(decoded['ack']))


    except (ValueError, KeyError, TypeError):
      log("[recv corrupt packet]")
  else:
    log("[error] timeout")
    sys.exit(-1)

sock.sendto(json.dumps({"eof": True, "data": "", "sequence": SEQUENCE, "ack": False}), dest)
sys.exit(0)
